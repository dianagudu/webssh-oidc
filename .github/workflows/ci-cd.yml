name: CI-CD

on:
  push:
    branches:
      - 'main'
      - 'prerel'
    tags:
      - v*
  pull_request:
    branches:
      - 'main'

env:
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  # build-and-test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [16.x]
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@master
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Install dependencies
  #       run: |
  #         npm install
  #         npm ci
  #     - name: Build
  #       run: npm run build
  #     # - name: Test
  #     #   run: npm run test
  # build-and-push-image:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Get Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-22.04
    # needs: build-and-push-image
    # if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Install deps
        run: |
          curl repo.data.kit.edu/repo-data-kit-edu-key.gpg \
          | gpg --dearmor \
          | sudo tee /etc/apt/trusted.gpg.d/kitrepo-archive.gpg
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/kitrepo-archive.gpg] https://repo.data.kit.edu//ubuntu/22.04 ./" \
          | sudo tee -a /etc/apt/sources.list
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/kitrepo-archive.gpg] https://repo.data.kit.edu//ubuntu/jammy ./" \
          | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y mytoken sshpass
      - name: Get access token from mytoken
        id: step_get_access_token
        env:
          MYTOKEN: ${{ secrets.HELMHOLTZ_MYTOKEN }}
        run: |
          echo ACCESS_TOKEN=$(mytoken AT --MT-env MYTOKEN --scope openid) >> "$GITHUB_ENV"
      - name: Connect to deployment VM
        env:
          SSHPASS: ${{ env.ACCESS_TOKEN }}
        run: |
          TEMPFILE=$(mktemp)
          echo ${{ secrets.DEPLOYMENT_HOST_KEY }} > $TEMPFILE
          sshpass -P 'Access Token' -e ssh -o "UserKnownHostsFile $TEMPFILE" -p ${{ secrets.DEPLOYMENT_PORT }} ${{ secrets.DEPLOYMENT_USER }}@${{ secrets.DEPLOYMENT_HOST }} \
            " \
              echo '---> Pulling new docker image...' && \
              docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }} && \
              echo && echo '---> Rebuilding and restarting container with new image...' && \
              cd motley_cue_docker && docker-compose up -d --no-deps --build ${{ env.IMAGE_NAME }} && \
              echo && echo '---> Checking that the container is running...' && \
              docker-compose ps ${{ env.IMAGE_NAME }} | grep Up  && exit 0 || exit 1 \
            "
